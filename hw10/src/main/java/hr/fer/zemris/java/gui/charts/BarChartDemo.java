package hr.fer.zemris.java.gui.charts;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;

/**
 * A demo program that opens a frame and draws a bar chart based on the contents
 * parsed from a file given as command line argument.
 * 
 * @author staver
 *
 */
public class BarChartDemo extends JFrame {

	private static final long serialVersionUID = 1L;

	/**
	 * BarChartDemo constructor. Initializes GUI.
	 * 
	 * @param chart BarChart used to draw the chart component
	 * @param path  path to file from which the given BarChart was created
	 */
	public BarChartDemo(BarChart chart, String path) {
		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		setSize(600, 600);
		initGUI(chart, path);
	}

	/**
	 * Initializes GUI. Adds to content pane a label with the given file name, and a
	 * BarChartComponent based on the given chart.
	 * 
	 * @param chart chart used to create a BarChartComponent
	 * @param path  path to file to be displayed
	 */
	private void initGUI(BarChart chart, String path) {
		Container cp = getContentPane();
		JLabel label = new JLabel(path);
		label.setBackground(Color.decode("#E8E8E8"));
		label.setHorizontalAlignment(JLabel.CENTER);
		label.setOpaque(true);
		cp.add(label, BorderLayout.PAGE_START);
		cp.add(new BarChartComponent(chart), BorderLayout.CENTER);
	}

	/**
	 * Main method that gets called when the program starts. One command line
	 * argument is expected: path to file that describes a bar chart using the
	 * format explained in the homework text. The method invokes a BarChartDemo
	 * frame that draws a BarChart created by parsing the given file.
	 * 
	 * @param args command line arguments: 1 argument is expected - path to file
	 */
	public static void main(String[] args) {
		if (args.length != 1) {
			System.out.println("1 command line argument expected.");
			System.exit(0);
		}
		String path = args[0];
		BufferedReader reader;

		try {
			reader = new BufferedReader(new FileReader(path));

			String xDescription = reader.readLine();
			String yDescription = reader.readLine();
			String points = reader.readLine();
			List<XYValue> pointsList = parsePoints(points);
			int minY = Integer.parseInt(reader.readLine());
			int maxY = Integer.parseInt(reader.readLine());
			int yGap = Integer.parseInt(reader.readLine());

			SwingUtilities.invokeLater(() -> {
				new BarChartDemo(new BarChart(pointsList, xDescription, yDescription, minY, maxY, yGap), path)
						.setVisible(true);
			});
		} catch (IOException ex) {
			System.out.println("Unable to read from file: " + ex.getMessage());
		} catch (IllegalArgumentException ex) {
			System.out.println("Unable to parse file: " + ex.getMessage());
		}

	}

	/**
	 * Parses the given string into a list of XYValue objects and returns it.
	 * 
	 * @param points string to be parsed
	 * @return a list of XYValue objects generated by parsing the given string
	 * @throws IllegalArgumentException if unable to parse
	 */
	public static List<XYValue> parsePoints(String points) {
		List<XYValue> list = new ArrayList<>();
		String[] pointsSplit = points.split("\\s+");

		for (String point : pointsSplit) {
			String[] coordinates = point.split(",");
			try {
				list.add(new XYValue(Integer.parseInt(coordinates[0]), Integer.parseInt(coordinates[1])));
			} catch (NumberFormatException ex) {
				throw new IllegalArgumentException(ex.getMessage());
			}
		}
		return list;
	}

}
