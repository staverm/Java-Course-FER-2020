package hr.fer.zemris.java.hw05.db;

import java.util.ArrayList;
import java.util.List;

/**
 * Class that parses a query specified by a string into a list of conditional
 * expressions which can be acquired by calling the getQuery() method. Also
 * supports quick jmbag retrieval if the query is a direct one.
 * 
 * @author Mauro Staver
 *
 */
public class QueryParser {

	/**
	 * List of conditional expressions generated by parsing this query.
	 */
	private List<ConditionalExpression> list = new ArrayList<>();
	private boolean isDirectQuery = false; // flag if this query is a direct one
	private boolean directQuerySet = false; // flag that is true if isDirectQuery has been set
	private String queriedJMBAG; // queried jmbag if this query is a direct one

	/**
	 * Constructs and initializes this QueryParser. It parses the specified string
	 * into an internal list of conditional expressions.
	 * 
	 * @param query String to be parsed.
	 * @throws IllegalArgumentException if the string could not be parsed.
	 */
	public QueryParser(String query) {
		Lexer lexer = new Lexer(query);
		Token token;

		while ((token = lexer.next()).getType() != TokenType.EOF) { // get next token, until EOF
			if (token.getValue().toUpperCase().equals("AND")) {
				isDirectQuery = false;
				continue;
			}

			IFieldValueGetter fieldGetter = getFieldValueGetter(token); // may throw exception
			Token prevToken = token;
			token = lexer.next();
			IComparisonOperator operator = getOperator(token); // may throw exception

			// setting isDirectQuery
			if (!directQuerySet && prevToken.getValue().equals("jmbag") && token.getValue().equals("=")) {
				isDirectQuery = true;
				directQuerySet = true;
			}

			String stringLiteral;
			if ((token = lexer.next()).getType() == TokenType.STRING) {
				stringLiteral = token.getValue();
				if (isDirectQuery) {
					queriedJMBAG = stringLiteral;
				}
			} else {
				throw new IllegalArgumentException("Expected String literal.");
			}

			list.add(new ConditionalExpression(fieldGetter, stringLiteral, operator));
		}

	}

	/**
	 * Returns a IFieldValueGetter matched by the specified token.
	 * 
	 * @param token Token to match.
	 * @return IFieldValueGetter matched by the specified token.
	 * @throws IllegalArgumentException if the token could not be matched.
	 */
	private IFieldValueGetter getFieldValueGetter(Token token) {
		IFieldValueGetter fieldValueGetter = null;
		switch (token.getValue()) {
		case "jmbag":
			fieldValueGetter = FieldValueGetters.JMBAG;
			break;
		case "lastName":
			fieldValueGetter = FieldValueGetters.LAST_NAME;
			break;
		case "firstName":
			fieldValueGetter = FieldValueGetters.FIRST_NAME;
			break;
		default:
			throw new IllegalArgumentException("Invalid attribute name.");
		}
		return fieldValueGetter;
	}

	/**
	 * Returns a IComparisonOperator matched by the specified token.
	 * 
	 * @param token Token to match.
	 * @return IComparisonOperator matched by the specified token.
	 * @throws IllegalArgumentException if the token could not be matched.
	 */
	private IComparisonOperator getOperator(Token token) {
		IComparisonOperator operator = null;
		switch (token.getValue()) {
		case "=":
			operator = ComparisonOperators.EQUALS;
			break;
		case "<":
			operator = ComparisonOperators.LESS;
			break;
		case "<=":
			operator = ComparisonOperators.LESS_OR_EQUALS;
			break;
		case ">":
			operator = ComparisonOperators.GREATER;
			break;
		case ">=":
			operator = ComparisonOperators.GREATER_OR_EQUALS;
			break;
		case "<>":
			operator = ComparisonOperators.NOT_EQUALS;
			break;
		case "LIKE":
			operator = ComparisonOperators.LIKE;
			break;
		default:
			throw new IllegalArgumentException("Invalid operator.");
		}

		return operator;
	}

	/**
	 * Returns true if the query is a direct one, false otherwise. A direct query is
	 * a query of the form jmbag = "xxx"(i.e. it must have only one comparison, on
	 * attribute jmbag, and operator must be equals).
	 * 
	 * @return true if the query is a direct one, false otherwise.
	 */
	public boolean isDirectQuery() {
		return isDirectQuery;
	}

	/**
	 * Returns the queried jmbag if the query is a direct one.
	 * 
	 * @return String - the queried jmbag if the query is a direct one.
	 * @throws IllegalStateException if the query is not a direct one.
	 */
	public String getQueriedJMBAG() {
		if (isDirectQuery) {
			return queriedJMBAG;
		} else {
			throw new IllegalStateException("The query was not a direct one.");
		}
	}

	/**
	 * Returns a list of conditional expressions generated by this query parser.
	 * 
	 * @return List<ConditionalExpression> generated by this query parser.
	 */
	public List<ConditionalExpression> getQuery() {
		return list;
	}
}
