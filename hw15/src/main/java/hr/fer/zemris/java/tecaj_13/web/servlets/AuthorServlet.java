package hr.fer.zemris.java.tecaj_13.web.servlets;

import java.io.IOException;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import hr.fer.zemris.java.tecaj_13.dao.DAOProvider;
import hr.fer.zemris.java.tecaj_13.dao.jpa.JPAEMProvider;
import hr.fer.zemris.java.tecaj_13.model.BlogComment;
import hr.fer.zemris.java.tecaj_13.model.BlogEntry;
import hr.fer.zemris.java.tecaj_13.model.BlogUser;
import hr.fer.zemris.java.tecaj_13.web.forms.BlogCommentForm;
import hr.fer.zemris.java.tecaj_13.web.forms.BlogEntryForm;

/**
 * Servlet that handles different requests whose path starts with
 * '/servleti/author/'. There are 4 different expected path requests of the
 * following forms: /NICK, /NICK/id, NICK/new and NICK/edit/id (where NICK is
 * blog user's nickname and id is some blog entry id).
 * 
 * @author staver
 *
 */
@WebServlet("/servleti/author/*")
public class AuthorServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;

	/**
	 * Determines the path from the servlet request object and processes each path
	 * in a unique way. Basically prepares some data and forwards it to some jsp
	 * that does html generation. What data is prepared depends on the given path.
	 */
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String path;
		try {
			path = req.getPathInfo().substring(1);
		} catch (Exception ex) {
			sendError("Bad URL Format.", req, resp);
			return;
		}

		String[] pathSplit = path.split("/");

		BlogUser author = extractAuthor(path);

		if (author == null) {
			sendError("Author not found", req, resp);
			return;
		}

		req.setAttribute("author", author);

		if (pathSplit.length == 1) { // process /NICK request

			List<BlogEntry> entries = DAOProvider.getDAO().getBlogEntries(author);
			req.setAttribute("entries", entries);
			req.getRequestDispatcher("/WEB-INF/pages/authorPage.jsp").forward(req, resp);

		} else if (pathSplit.length <= 3) {

			if (parsableToLong(pathSplit[1])) { // process /NICK/id request

				BlogEntry entry = DAOProvider.getDAO().getBlogEntry(Long.parseLong(pathSplit[1]));
				if (entry != null && entry.getCreator().equals(author)) {
					req.setAttribute("entry", entry);
					req.setAttribute("comments", entry.getComments());
					BlogComment comment = new BlogComment();
					BlogCommentForm f = new BlogCommentForm();
					f.fillFromComment(comment);
					req.setAttribute("entryForm", f);
				} else {
					sendError("There exists no blog entry with given id that matches the author.", req, resp);
					return;

				}
				req.getRequestDispatcher("/WEB-INF/pages/entryPage.jsp").forward(req, resp);

			} else if (pathSplit[1].equals(("new"))) { // process /NICK/new request

				if (!author.getNick().equals(req.getSession().getAttribute("current.user.nick"))) {// nick is unique
					sendError("Unathorized access", req, resp);
					return;
				}

				BlogEntry entry = new BlogEntry();
				BlogEntryForm f = new BlogEntryForm();
				f.fillFromEntry(entry);

				req.setAttribute("entryForm", f);
				req.getRequestDispatcher("/WEB-INF/pages/entryForm.jsp").forward(req, resp);

			} else if (pathSplit[1].equals("edit")) { // process /NICK/edit/id request

				if (!author.getNick().equals(req.getSession().getAttribute("current.user.nick"))) {
					sendError("Unathorized access", req, resp);
					return;
				}
				
				Long entryID;
				try {
					entryID = Long.parseLong(pathSplit[2]);
				}catch(Exception ex) {
					sendError("Invalid entry id.", req, resp);
					return;
				}

				BlogEntry entry = DAOProvider.getDAO().getBlogEntry(entryID);
				if (entry == null) {
					sendError("There exists no blog entry with given id that matches the author.", req, resp);
					return;
				}

				BlogEntryForm f = new BlogEntryForm();
				f.fillFromEntry(entry); // fill form with current data

				req.setAttribute("entryForm", f);
				req.getRequestDispatcher("/WEB-INF/pages/entryForm.jsp").forward(req, resp);

			} else {
				sendError("Bad URL Format.", req, resp);
				return;
			}

		} else {
			sendError("Bad URL Format.", req, resp);
			return;
		}
	}

	/**
	 * Processes post request generated by multiple forms, each in a unique way.
	 * Editing and creating a new blog entry is done by the same form so to
	 * determine which one to process we look at the request url(same form sends
	 * post requests to different urls) eg. check whether the path is of type
	 * '/NICK/new' or '/NICK/edit/id'. This method also processes requests generated
	 * by the add comment form(which uses a hidden field 'form=addComment' so we can
	 * easily identify it. After the form has been identified, it is validated and if
	 * everything is ok fully processed. To see how each form should be processed, check
	 * appropriate documentation of classes in the package {@link hr.fer.zemris.java.tecaj_13.web.forms}
	 */
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String path;
		try {
			path = req.getPathInfo().substring(1);
		} catch (Exception ex) {
			sendError("Bad URL Format.", req, resp);
			return;
		}
		
		String[] pathSplit = path.split("/");

		BlogUser author = extractAuthor(path);
		if (author == null) {
			sendError("Author not found", req, resp);
			return;
		}

		String id; // id of the blog entry that gets rendered after processing the request

		if (req.getParameter("form").equals("addComment")) { // add comment form
			BlogCommentForm f = new BlogCommentForm();
			f.fillFromHttpRequest(req);
			f.validate();

			id = req.getParameter("entryID");

			if (f.hasErrors()) {
				BlogEntry entry = DAOProvider.getDAO().getBlogEntry(Long.parseLong(id));
				req.setAttribute("entry", entry);
				req.setAttribute("comments", entry.getComments());
				req.setAttribute("entryForm", f);
				req.getRequestDispatcher("/WEB-INF/pages/entryPage.jsp").forward(req, resp);
				return;
			}

			// create new comment from form
			BlogComment comment = new BlogComment();
			comment.setPostedOn(new Date());
			f.fillBlogComment(comment);
			BlogUser user = DAOProvider.getDAO().getBlogUser(req.getParameter("userNick"));
			String email = "Anonymous";
			if (user != null) {
				email = user.getEmail();
			}
			comment.setUsersEMail(email);
			comment.setBlogEntry(DAOProvider.getDAO().getBlogEntry(Long.parseLong(id)));
			// persist
			EntityManager em = JPAEMProvider.getEntityManager();
			em.persist(comment);

		} else { // blog entry form for creating new entries or editing existing ones
			
			String metoda = req.getParameter("metoda");
			if (!"Store".equals(metoda)) {
				resp.sendRedirect(req.getServletContext().getContextPath() + "/servleti/author/" + author.getNick());
				return;
			}

			BlogEntryForm f = new BlogEntryForm();
			f.fillFromHttpRequest(req);
			f.validate();

			if (f.hasErrors()) {
				req.setAttribute("entryForm", f);
				req.getRequestDispatcher("/WEB-INF/pages/entryForm.jsp").forward(req, resp);
				return;
			}

			if (pathSplit[1].equals("new")) { // create new blog entry
				BlogEntry entry = new BlogEntry();
				entry.setCreatedAt(new Date());
				entry.setLastModifiedAt(entry.getCreatedAt());
				entry.setCreator(author);
				f.fillBlogEntry(entry);
				// persist
				EntityManager em = JPAEMProvider.getEntityManager();
				em.persist(entry);

				id = entry.getId().toString();
			} else if (pathSplit[1].equals("edit")) { // edit existing entry (specified by id)
				Long entryID;
				try {
					entryID = Long.parseLong(pathSplit[2]);
				}catch(Exception ex) {
					sendError("Invalid entry id.", req, resp);
					return;
				}
				
				BlogEntry entry = DAOProvider.getDAO().getBlogEntry(entryID);
				// update entry with new values
				entry.setLastModifiedAt(new Date());
				f.fillBlogEntry(entry);

				id = entryID.toString();
			} else {
				sendError("Bad URL format.", req, resp);
				return;
			}
		}

		resp.sendRedirect(req.getServletContext().getContextPath() + "/servleti/author/" + author.getNick() + "/" + id);
	}

	/**
	 * Extracts and returns author's nickname from given path. If unable to -
	 * returns null. Path is expected to be of format NICK/x/y/z..
	 * 
	 * @param path path which contains author's nickname
	 * @return author's nickname or null if unable to extract it.
	 */
	private BlogUser extractAuthor(String path) {
		String[] pathSplit = path.split("/");

		BlogUser author = null;
		if (pathSplit.length > 0) {
			author = DAOProvider.getDAO().getBlogUser(pathSplit[0]);
		}

		return author;
	}

	/**
	 * Helper method that returns true if given string can be parsed to long, false
	 * otherwise.
	 * 
	 * @param s string to be checked
	 * @return true if given string can be parsed to long, false otherwise
	 */
	private boolean parsableToLong(String s) {
		try {
			Long.parseLong(s);
			return true;
		} catch (Exception ex) {
			return false;
		}
	}

	/**
	 * Renders an error page displaying the given string.
	 * 
	 * @param message error message to be displayed
	 * @param req     http servlet request object
	 * @param resp    http servlet response object
	 * @throws ServletException if exception occurs
	 * @throws IOException      if exception occurs
	 */
	void sendError(String message, HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		req.setAttribute("error", message);
		req.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(req, resp);
	}
}
