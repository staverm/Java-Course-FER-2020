package hr.fer.zemris.java.hw06.crypto;

/**
 * Utility class that implements methods for conversion between hex values and bytes.
 * 
 * @author Mauro Staver
 *
 */
public class Util {

	/**
	 * Converts the specified String containing a hex value into a byte array. The
	 * String is expected to be even sized and contain only digits and chars A-F
	 * (case-insensitive).
	 * 
	 * @param keyText Hex value(String) to be converted.
	 * @return byte array generated by the specified String.
	 * @throws IllegalArgumentException if the specified String is odd sized, or an
	 *                                  error occurs during conversion.
	 */
	public static byte[] hexToByte(String keyText) {
		if (keyText.length() % 2 != 0) {
			throw new IllegalArgumentException("Odd sized string.");
		}

		byte[] array = new byte[keyText.length() / 2];

		int j = 0;
		for (int i = 0; i < keyText.length() - 1; i += 2) {
			try {
				array[j++] = (byte) Integer.parseInt(keyText.substring(i, i + 2), 16);
			} catch (NumberFormatException ex) {
				throw new IllegalArgumentException(ex);
			}
		}

		return array;
	}

	/**
	 * Converts the specified byte array into a String containing the bytes hex
	 * value. Each byte in the array is converted into a String containing its hex
	 * value and these Strings are then concatenated together.
	 * 
	 * @param byteArray byte array to convert into String.
	 * @return String containing the
	 */
	public static String byteToHex(byte[] byteArray) {
		StringBuilder sb = new StringBuilder();

		for (int i = 0; i < byteArray.length; i++) {
			sb.append(toHex(byteArray[i]));
		}

		return sb.toString();
	}

	/**
	 * Converts the specified byte into a String containing its hex value.
	 * 
	 * @param b byte to convert.
	 * @return String containing the hex value of the specified byte.
	 */
	private static String toHex(byte b) {
		return String.format("%02x", b);
	}
}
